{"nbformat":4,"nbformat_minor":0,"metadata":{"colab":{"name":"CONAIISI Prophet Analisis Conjunto.ipynb","provenance":[],"collapsed_sections":[],"authorship_tag":"ABX9TyNhRN9HC63XV7riKNUMJsBC"},"kernelspec":{"name":"python3","display_name":"Python 3"},"language_info":{"name":"python"}},"cells":[{"cell_type":"code","metadata":{"id":"7vEmwEgYVM28"},"source":["#\n","# Este codigo realiza la predicción de casos nuevos para todos los países a la vez\n","# El codigo presente en CONAIISI Prophet Analisis Individual, realiza la predicción para cada país y manualmente se debe elegir cada uno\n","#\n","import findspark\n","import pyspark\n","from pyspark.sql import SparkSession\n","from optimus import Optimus \n","from fbprophet import Prophet\n","from fbprophet.plot import plot_plotly\n","import pandas as pd\n","from operator import add\n","\n","def iniciarYLeerConOptimus():\n","    #creo una sesion de spark\n","    spark = SparkSession.builder.appName('ejemplo-de-optimus').getOrCreate()\n","    #obtengo el archivo de HDFS\n","    # anterior df_load = spark.read.csv('hdfs://192.168.1.38:9000/user/hadoop/fuente2.csv', header=True)\n","    op = Optimus(spark)    \n","    #dataFrame = op.read.csv('hdfs://192.168.1.37:9000/user/hadoop/covid_19_clean_complete.csv', header=True)\n","    #dataFrame = op.read.csv('hdfs://192.168.1.37:9000/user/hadoop/dataset_limpio_completo_medidas.csv', header=True)\n","    #dataFrame = op.read.csv('hdfs://192.168.1.37:9000/user/hadoop/dataset_limpio_completo.csv', header=True)\n","    #dataFrame = op.read.csv('hdfs://192.168.1.37:9000/user/hadoop/Dataset_limpio_form_fecha.csv', header=True)\n","    dataFrame = op.read.csv('hdfs://192.168.1.37:9000/user/hadoop/global_con_formato_fecha.csv', header=True)\n","    #op.profiler.run(dataFrame, \"date\", infer=False)    \n","    \n","    return dataFrame\n","\n","df = iniciarYLeerConOptimus()\n","df.table(10)\n","\n","#df.select(\"age\").distinct().table()\n","\n","#df1 = df.select(\"iso_code\",\"date\",\"total_cases\")\n","df1 = df.select(\"iso_code\",\"date\",\"new_cases\")\n","df2 = df1.cols.date_transform(\"date\",\"dd/MM/yyyy\",\"yyyy/MM/dd\")\n","df3 = df2.na.drop()\n","\n","#spark\n","#dfUSA = df3.filter(\"iso_code LIKE 'USA'\") # OR iso_code LIKE 'VIR'\")\n","#df4 = dfUSA.select(\"date\",\"total_cases\")\n","#dfUSA.table(100)\n","\n","#optimus\n","##dfITA = df3.rows.select(df[\"iso_code\"]=='ITA')\n","##df4 = dfITA.select(\"date\",\"total_cases\")\n","\n","dfARG = df3.rows.select(df[\"iso_code\"]=='ARG')\n","df41 = dfARG.select(\"date\",\"new_cases\")\n","\n","dfESP = df3.rows.select(df[\"iso_code\"]=='ESP')\n","df43 = dfESP.select(\"date\",\"new_cases\")\n","\n","dfKOR = df3.rows.select(df[\"iso_code\"]=='KOR')\n","df42 = dfKOR.select(\"date\",\"new_cases\")\n","\n","#MEDIDAS TOMADAS\n","#df1 = df.select(\"DATE_IMPLEMENTED\",\"MEASURE\")\n","#rddPred = df1.rdd\n","\n","#df4.table(100)\n","#df4 = df3.cols.rename([('date','ds'),('total_cases','y')])\n","\n","df51 = df41.toPandas()\n","df51.rename(columns={'date': 'ds'}, inplace=True)\n","df51.rename(columns={'new_cases': 'y'}, inplace=True)\n","\n","df52 = df42.toPandas()\n","df52.rename(columns={'date': 'ds'}, inplace=True)\n","df52.rename(columns={'new_cases': 'y'}, inplace=True)\n","\n","df53 = df43.toPandas()\n","df53.rename(columns={'date': 'ds'}, inplace=True)\n","df53.rename(columns={'new_cases': 'y'}, inplace=True)\n","\n","\n","\n","#display(df5)\n","\n","#df1.table(15)\n","#df3.table(100)\n","\n","# ANÁLISIS -------------------------\n","prophet_basic1 = Prophet(changepoint_prior_scale=0.01, yearly_seasonality=True,daily_seasonality=True,weekly_seasonality=True)\n","#prophet_basic.add_seasonality(name='weekly', period=7, fourier_order=1, prior_scale=0.01)\n","prophet_basic1.fit(df51)\n","future1 = prophet_basic1.make_future_dataframe(periods=30)\n","#future1['cap'] = 500000\n","#future1['floor'] = 0\n","forecast1 = prophet_basic1.predict(future1)\n","\n","prophet_basic2 = Prophet(changepoint_prior_scale=0.01, yearly_seasonality=True,daily_seasonality=True,weekly_seasonality=True)\n","#prophet_basic.add_seasonality(name='weekly', period=7, fourier_order=1, prior_scale=0.01)\n","prophet_basic2.fit(df52)\n","future2 = prophet_basic2.make_future_dataframe(periods=30)\n","forecast2 = prophet_basic2.predict(future2)\n","\n","prophet_basic3 = Prophet(changepoint_prior_scale=0.01, yearly_seasonality=True,daily_seasonality=True,weekly_seasonality=True)\n","#prophet_basic.add_seasonality(name='weekly', period=7, fourier_order=1, prior_scale=0.01)\n","prophet_basic3.fit(df53)\n","future3 = prophet_basic3.make_future_dataframe(periods=30)\n","forecast3 = prophet_basic3.predict(future3)\n","\n","# VISUALIZACIÓN --------------------\n","fig1 = prophet_basic1.plot(forecast1)\n","ax1 = fig1.gca()\n","ax1.set_xlabel('Fecha', size=20)\n","ax1.set_ylabel('Cant Infectados Nuevos', size=20)\n","ax1.tick_params(axis=\"x\", labelsize=13)\n","ax1.tick_params(axis=\"y\", labelsize=15)\n","\n","fig2 = prophet_basic2.plot(forecast2)\n","ax2 = fig2.gca()\n","ax2.set_xlabel('Fecha', size=20)\n","ax2.set_ylabel('Cant Infectados Nuevos', size=20)\n","ax2.tick_params(axis=\"x\", labelsize=13)\n","ax2.tick_params(axis=\"y\", labelsize=15)\n","\n","fig3 = prophet_basic3.plot(forecast3)\n","ax3 = fig3.gca()\n","ax3.set_xlabel('Fecha', size=20)\n","ax3.set_ylabel('Cant Infectados Nuevos', size=20)\n","ax3.tick_params(axis=\"x\", labelsize=13)\n","ax3.tick_params(axis=\"y\", labelsize=15)"],"execution_count":null,"outputs":[]}]}